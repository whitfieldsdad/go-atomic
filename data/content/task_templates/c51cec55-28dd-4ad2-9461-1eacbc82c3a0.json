{
  "id": "c51cec55-28dd-4ad2-9461-1eacbc82c3a0",
  "name": "Data Compressed - nix - zip",
  "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard zip compression.\n",
  "platforms": [
    "linux",
    "darwin"
  ],
  "steps": [
    {
      "id": "637816e4-b6e5-471b-8e5b-b9b17562cd88",
      "type": "execute-command",
      "data": {
        "command": "zip #{output_file} #{input_files}\n",
        "command_type": "sh"
      },
      "elevation_required": false
    },
    {
      "id": "ce218340-927d-44b2-8059-a4c142560184",
      "type": "execute-command",
      "data": {
        "command": "rm -f #{output_file}\n",
        "command_type": "sh"
      },
      "elevation_required": false
    },
    {
      "id": "18dfebef-baf5-4938-8ff7-ee24cbc5af8b",
      "name": "Check dependency 1/1",
      "description": "Files to zip must exist (#{input_files})\n",
      "type": "execute-command",
      "data": {
        "command": "if [ $(ls #{input_files} | wc -l) \u003e 0 ] \u0026\u0026 [ -x $(which zip) ] ; then exit 0; else exit 1; fi;\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "6c4383fe-f233-4f19-90dc-de82eb329481",
      "name": "Resolve dependency 1/1",
      "description": "Files to zip must exist (#{input_files})\n",
      "type": "execute-command",
      "data": {
        "command": "(which yum \u0026\u0026 yum -y install epel-release zip)||(which apt-get \u0026\u0026 apt-get install -y zip)\necho Please set input_files argument to include files that exist\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "dea799a2-4ffd-4787-987f-bc79bdb9f739",
      "name": "Re-check dependency 1/1",
      "description": "Files to zip must exist (#{input_files})\n",
      "type": "execute-command",
      "data": {
        "command": "if [ $(ls #{input_files} | wc -l) \u003e 0 ] \u0026\u0026 [ -x $(which zip) ] ; then exit 0; else exit 1; fi;\n",
        "command_type": ""
      },
      "elevation_required": false
    }
  ],
  "flows": [
    {
      "s": "637816e4-b6e5-471b-8e5b-b9b17562cd88",
      "p": "on-success",
      "o": "ce218340-927d-44b2-8059-a4c142560184"
    },
    {
      "s": "637816e4-b6e5-471b-8e5b-b9b17562cd88",
      "p": "on-failure",
      "o": "ce218340-927d-44b2-8059-a4c142560184"
    },
    {
      "s": "18dfebef-baf5-4938-8ff7-ee24cbc5af8b",
      "p": "on-success",
      "o": "637816e4-b6e5-471b-8e5b-b9b17562cd88"
    },
    {
      "s": "18dfebef-baf5-4938-8ff7-ee24cbc5af8b",
      "p": "on-failure",
      "o": "6c4383fe-f233-4f19-90dc-de82eb329481"
    },
    {
      "s": "6c4383fe-f233-4f19-90dc-de82eb329481",
      "p": "on-success",
      "o": "dea799a2-4ffd-4787-987f-bc79bdb9f739"
    },
    {
      "s": "dea799a2-4ffd-4787-987f-bc79bdb9f739",
      "p": "on-failure",
      "o": "637816e4-b6e5-471b-8e5b-b9b17562cd88"
    }
  ],
  "tags": [
    "T1560",
    "T1560.001"
  ],
  "input_arguments": [
    {
      "name": "input_files",
      "type": "path",
      "description": "Path that should be compressed into our output file, may include wildcards",
      "value": "/var/log/{w,b}tmp"
    },
    {
      "name": "output_file",
      "type": "path",
      "description": "Path that should be output as a zip archive",
      "value": "$HOME/data.zip"
    }
  ]
}