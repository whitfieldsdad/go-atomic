{
  "id": "ae56083f-28d0-417d-84da-df4242da1f7c",
  "name": "Run Shellcode via Syscall in Go",
  "description": "Runs shellcode in the current running process via a syscall.\n\nSteps taken with this technique\n1. Allocate memory for the shellcode with VirtualAlloc setting the page permissions to Read/Write\n2. Use the RtlCopyMemory macro to copy the shellcode to the allocated memory space\n3. Change the memory page permissions to Execute/Read with VirtualProtect\n4. Use syscall to execute the entrypoint of the shellcode\n\n- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode#syscall)\n",
  "platforms": [
    "windows"
  ],
  "steps": [
    {
      "id": "48c37051-694a-444d-9410-0677352a001f",
      "type": "execute-command",
      "data": {
        "command": "$PathToAtomicsFolder\\T1106\\bin\\x64\\syscall.exe -debug\n",
        "command_type": "powershell"
      },
      "elevation_required": false
    },
    {
      "id": "64cf9bbf-2543-4e32-a45c-bcc08273005e",
      "type": "execute-command",
      "data": {
        "command": "Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue",
        "command_type": "powershell"
      },
      "elevation_required": false
    }
  ],
  "flows": [
    {
      "s": "48c37051-694a-444d-9410-0677352a001f",
      "p": "on-success",
      "o": "64cf9bbf-2543-4e32-a45c-bcc08273005e"
    },
    {
      "s": "48c37051-694a-444d-9410-0677352a001f",
      "p": "on-failure",
      "o": "64cf9bbf-2543-4e32-a45c-bcc08273005e"
    }
  ],
  "tags": [
    "T1106",
    "atomic-red-team"
  ]
}