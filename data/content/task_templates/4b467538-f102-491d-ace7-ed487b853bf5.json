{
  "id": "4b467538-f102-491d-ace7-ed487b853bf5",
  "name": "List Open Egress Ports",
  "description": "This is to test for what ports are open outbound.  The technique used was taken from the following blog:\nhttps://www.blackhillsinfosec.com/poking-holes-in-the-firewall-egress-testing-with-allports-exposed/\n\nUpon successful execution, powershell will read top-128.txt (ports) and contact each port to confirm if open or not. Output will be to Desktop\\open-ports.txt.\n",
  "platforms": [
    "windows"
  ],
  "steps": [
    {
      "id": "66f95c1f-ca1d-4108-87a0-3e55f03c1be2",
      "type": "execute-command",
      "data": {
        "command": "$ports = Get-content \"#{port_file}\"\n$file = \"#{output_file}\"\n$totalopen = 0\n$totalports = 0\nNew-Item $file -Force\nforeach ($port in $ports) {\n    $test = new-object system.Net.Sockets.TcpClient\n    $wait = $test.beginConnect(\"allports.exposed\", $port, $null, $null)\n    $wait.asyncwaithandle.waitone(250, $false) | Out-Null\n    $totalports++ | Out-Null\n    if ($test.Connected) {\n        $result = \"$port open\" \n        Write-Host -ForegroundColor Green $result\n        $result | Out-File -Encoding ASCII -append $file\n        $totalopen++ | Out-Null\n    }\n    else {\n        $result = \"$port closed\" \n        Write-Host -ForegroundColor Red $result\n        $totalclosed++ | Out-Null\n        $result | Out-File -Encoding ASCII -append $file\n    }\n}\n$results = \"There were a total of $totalopen open ports out of $totalports ports tested.\"\n$results | Out-File -Encoding ASCII -append $file\nWrite-Host $results\n",
        "command_type": "powershell"
      },
      "elevation_required": false
    },
    {
      "id": "6b978283-f68e-4891-9565-7e0f51fd7edb",
      "type": "execute-command",
      "data": {
        "command": "Remove-Item -ErrorAction ignore \"#{output_file}\"\n",
        "command_type": "powershell"
      },
      "elevation_required": false
    },
    {
      "id": "b25646e7-3632-4983-b8b4-1da962717ffa",
      "name": "Check dependency 1/1",
      "description": "Test requires #{port_file} to exist\n",
      "type": "execute-command",
      "data": {
        "command": "if (Test-Path \"#{port_file}\") {exit 0} else {exit 1}\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "87bc841a-fe8a-4d59-9a22-8e4d74852161",
      "name": "Resolve dependency 1/1",
      "description": "Test requires #{port_file} to exist\n",
      "type": "execute-command",
      "data": {
        "command": "New-Item -Type Directory (split-path \"#{port_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"#{portfile_url}\" -OutFile \"#{port_file}\"\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "c0a33afe-771f-4033-959a-a70299d57849",
      "name": "Re-check dependency 1/1",
      "description": "Test requires #{port_file} to exist\n",
      "type": "execute-command",
      "data": {
        "command": "if (Test-Path \"#{port_file}\") {exit 0} else {exit 1}\n",
        "command_type": ""
      },
      "elevation_required": false
    }
  ],
  "flows": [
    {
      "s": "66f95c1f-ca1d-4108-87a0-3e55f03c1be2",
      "p": "on-success",
      "o": "6b978283-f68e-4891-9565-7e0f51fd7edb"
    },
    {
      "s": "66f95c1f-ca1d-4108-87a0-3e55f03c1be2",
      "p": "on-failure",
      "o": "6b978283-f68e-4891-9565-7e0f51fd7edb"
    },
    {
      "s": "b25646e7-3632-4983-b8b4-1da962717ffa",
      "p": "on-success",
      "o": "66f95c1f-ca1d-4108-87a0-3e55f03c1be2"
    },
    {
      "s": "b25646e7-3632-4983-b8b4-1da962717ffa",
      "p": "on-failure",
      "o": "87bc841a-fe8a-4d59-9a22-8e4d74852161"
    },
    {
      "s": "87bc841a-fe8a-4d59-9a22-8e4d74852161",
      "p": "on-success",
      "o": "c0a33afe-771f-4033-959a-a70299d57849"
    },
    {
      "s": "c0a33afe-771f-4033-959a-a70299d57849",
      "p": "on-failure",
      "o": "66f95c1f-ca1d-4108-87a0-3e55f03c1be2"
    }
  ],
  "tags": [
    "T1016",
    "atomic-red-team"
  ],
  "input_arguments": [
    {
      "name": "portfile_url",
      "type": "url",
      "description": "URL to top-128.txt",
      "value": "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1016/src/top-128.txt"
    },
    {
      "name": "port_file",
      "type": "path",
      "description": "The path to a text file containing ports to be scanned, one port per line. The default list uses the top 128 ports as defined by Nmap.",
      "value": "PathToAtomicsFolder\\T1016\\src\\top-128.txt"
    },
    {
      "name": "output_file",
      "type": "path",
      "description": "Path of file to write port scan results",
      "value": "$env:USERPROFILE\\Desktop\\open-ports.txt"
    }
  ]
}