{
  "id": "356dc0e8-684f-4428-bb94-9313998ad608",
  "name": "Base64 decoding with Python",
  "description": "Use Python to decode a base64-encoded text string and echo it to the console\n",
  "platforms": [
    "linux",
    "darwin"
  ],
  "steps": [
    {
      "id": "365a2663-5d95-4b3f-aaed-087d8368d6bc",
      "type": "execute-command",
      "data": {
        "command": "ENCODED=$(python3 -c 'import base64;enc=base64.b64encode(\"#{message}\".encode());print(enc.decode())')\npython3 -c \"import base64;dec=base64.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"import base64 as d;dec=d.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"from base64 import b64decode;dec=b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"from base64 import b64decode as d;dec=d(\\\"$ENCODED\\\");print(dec.decode())\"\necho $ENCODED | python3 -c \"import base64,sys;dec=base64.b64decode(sys.stdin.read());print(dec.decode())\"\necho $ENCODED \u003e #{encoded_file} \u0026\u0026 python3 -c \"import base64;dec=base64.b64decode(open('#{encoded_file}').read());print(dec.decode())\"",
        "command_type": "sh"
      },
      "elevation_required": false
    },
    {
      "id": "fa7795aa-e742-4e6d-a7ea-3ec43b5f0cd7",
      "name": "Check dependency 1/1",
      "description": "Python must be present\n",
      "type": "execute-command",
      "data": {
        "command": "which python3",
        "command_type": "sh"
      },
      "elevation_required": false
    },
    {
      "id": "6d1e0d31-43eb-43fe-8492-08f1efc1f797",
      "name": "Resolve dependency 1/1",
      "description": "Python must be present\n",
      "type": "execute-command",
      "data": {
        "command": "echo \"Please install Python 3\"",
        "command_type": "sh"
      },
      "elevation_required": false
    },
    {
      "id": "465b3844-7b7b-44ce-8e1a-ece930109c9b",
      "name": "Re-check dependency 1/1",
      "description": "Python must be present\n",
      "type": "execute-command",
      "data": {
        "command": "which python3",
        "command_type": "sh"
      },
      "elevation_required": false
    }
  ],
  "flows": [
    {
      "s": "fa7795aa-e742-4e6d-a7ea-3ec43b5f0cd7",
      "p": "on-success",
      "o": "365a2663-5d95-4b3f-aaed-087d8368d6bc"
    },
    {
      "s": "fa7795aa-e742-4e6d-a7ea-3ec43b5f0cd7",
      "p": "on-failure",
      "o": "6d1e0d31-43eb-43fe-8492-08f1efc1f797"
    },
    {
      "s": "6d1e0d31-43eb-43fe-8492-08f1efc1f797",
      "p": "on-success",
      "o": "465b3844-7b7b-44ce-8e1a-ece930109c9b"
    },
    {
      "s": "465b3844-7b7b-44ce-8e1a-ece930109c9b",
      "p": "on-failure",
      "o": "365a2663-5d95-4b3f-aaed-087d8368d6bc"
    }
  ],
  "tags": [
    "T1140"
  ],
  "input_arguments": [
    {
      "name": "message",
      "type": "string",
      "description": "Message to print to the screen",
      "value": "Hello from Atomic Red Team test T1140!"
    },
    {
      "name": "encoded_file",
      "type": "path",
      "description": "File to temporarily save encoded text",
      "value": "/tmp/T1140.encoded"
    }
  ]
}